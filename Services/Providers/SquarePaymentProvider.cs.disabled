using Microsoft.Extensions.Options;
using Square;
using Square.Models;
using PaymentService.Configuration;
using PaymentService.Models.DTOs;
using PaymentService.Models.Entities;

namespace PaymentService.Services.Providers;

/// <summary>
/// Square payment provider implementation
/// </summary>
public class SquarePaymentProvider : IPaymentProvider
{
    private readonly SquareSettings _settings;
    private readonly ILogger<SquarePaymentProvider> _logger;
    private readonly ISquareClient _squareClient;

    public string ProviderName => "square";
    public List<string> SupportedPaymentMethods => _settings.SupportedMethods;
    public bool IsEnabled => _settings.IsEnabled;

    public SquarePaymentProvider(
        IOptions<PaymentProvidersSettings> paymentProvidersSettings,
        ILogger<SquarePaymentProvider> logger)
    {
        _settings = paymentProvidersSettings.Value.Square;
        _logger = logger;

        // Configure Square client
        var environment = _settings.IsSandbox ? Square.Environment.Sandbox : Square.Environment.Production;
        
        _squareClient = new SquareClient.Builder()
            .Environment(environment)
            .AccessToken(_settings.AccessToken)
            .Build();

        _logger.LogInformation("Square payment provider initialized. Enabled: {IsEnabled}, Sandbox: {IsSandbox}", 
            IsEnabled, _settings.IsSandbox);
    }

    public async Task<PaymentProviderResult> ProcessPaymentAsync(ProcessPaymentDto request, string correlationId)
    {
        try
        {
            _logger.LogInformation("Processing Square payment for order {OrderId} [CorrelationId: {CorrelationId}]", 
                request.OrderId, correlationId);

            var paymentsApi = _squareClient.PaymentsApi;
            
            // Build payment request
            var paymentRequest = new CreatePaymentRequest(
                sourceId: GetSourceId(request),
                idempotencyKey: Guid.NewGuid().ToString(),
                amountMoney: new Money(
                    amount: (long)(request.Amount * 100), // Square uses cents
                    currency: request.Currency.ToUpper()
                )
            )
            {
                ReferenceId = request.OrderId,
                Note = request.Description ?? $"Payment for order {request.OrderId}",
                OrderId = request.OrderId
            };

            var response = await paymentsApi.CreatePaymentAsync(paymentRequest);

            if (response.IsSuccess)
            {
                var payment = response.Body.Payment;
                
                var result = new PaymentProviderResult
                {
                    TransactionId = payment.Id,
                    ProviderTransactionId = payment.Id,
                    Metadata = new Dictionary<string, object>
                    {
                        ["square_payment_id"] = payment.Id ?? "",
                        ["square_status"] = payment.Status ?? ""
                    }
                };

                switch (payment.Status?.ToUpper())
                {
                    case "COMPLETED":
                        result.IsSuccess = true;
                        result.Status = PaymentStatus.Succeeded;
                        _logger.LogInformation("Square payment succeeded for order {OrderId} [CorrelationId: {CorrelationId}]", 
                            request.OrderId, correlationId);
                        break;
                        
                    case "PENDING":
                        result.IsSuccess = true;
                        result.Status = PaymentStatus.Processing;
                        _logger.LogInformation("Square payment pending for order {OrderId} [CorrelationId: {CorrelationId}]", 
                            request.OrderId, correlationId);
                        break;
                        
                    case "APPROVED":
                        result.IsSuccess = true;
                        result.Status = PaymentStatus.Processing;
                        _logger.LogInformation("Square payment approved for order {OrderId} [CorrelationId: {CorrelationId}]", 
                            request.OrderId, correlationId);
                        break;
                        
                    default:
                        result.IsSuccess = false;
                        result.Status = PaymentStatus.Failed;
                        result.FailureReason = $"Square payment failed with status: {payment.Status}";
                        _logger.LogError("Square payment failed for order {OrderId} with status {Status} [CorrelationId: {CorrelationId}]", 
                            request.OrderId, payment.Status, correlationId);
                        break;
                }

                return result;
            }
            else
            {
                var errorMessage = string.Join(", ", response.Errors?.Select(e => e.Detail) ?? new[] { "Unknown error" });
                
                _logger.LogError("Square payment failed for order {OrderId}: {Error} [CorrelationId: {CorrelationId}]", 
                    request.OrderId, errorMessage, correlationId);
                    
                return new PaymentProviderResult
                {
                    IsSuccess = false,
                    Status = PaymentStatus.Failed,
                    FailureReason = errorMessage
                };
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unexpected error processing Square payment for order {OrderId} [CorrelationId: {CorrelationId}]", 
                request.OrderId, correlationId);
                
            return new PaymentProviderResult
            {
                IsSuccess = false,
                Status = PaymentStatus.Failed,
                FailureReason = "An unexpected error occurred"
            };
        }
    }

    public async Task<RefundProviderResult> ProcessRefundAsync(Models.Entities.Payment payment, decimal amount, string reason, string correlationId)
    {
        try
        {
            _logger.LogInformation("Processing Square refund for payment {PaymentId}, amount {Amount} [CorrelationId: {CorrelationId}]", 
                payment.Id, amount, correlationId);

            var refundsApi = _squareClient.RefundsApi;
            
            var refundRequest = new RefundPaymentRequest(
                idempotencyKey: Guid.NewGuid().ToString(),
                amountMoney: new Money(
                    amount: (long)(amount * 100), // Square uses cents
                    currency: payment.Currency.ToUpper()
                ),
                paymentId: payment.ProviderTransactionId
            )
            {
                Reason = reason ?? "Customer requested refund"
            };

            var response = await refundsApi.RefundPaymentAsync(refundRequest);

            if (response.IsSuccess)
            {
                var refund = response.Body.Refund;
                
                var result = new RefundProviderResult
                {
                    RefundId = refund.Id,
                    ProviderRefundId = refund.Id,
                    Metadata = new Dictionary<string, object>
                    {
                        ["square_refund_id"] = refund.Id ?? "",
                        ["square_status"] = refund.Status ?? ""
                    }
                };

                switch (refund.Status?.ToUpper())
                {
                    case "COMPLETED":
                        result.IsSuccess = true;
                        result.Status = RefundStatus.Succeeded;
                        _logger.LogInformation("Square refund succeeded for payment {PaymentId} [CorrelationId: {CorrelationId}]", 
                            payment.Id, correlationId);
                        break;
                        
                    case "PENDING":
                        result.IsSuccess = true;
                        result.Status = RefundStatus.Processing;
                        _logger.LogInformation("Square refund pending for payment {PaymentId} [CorrelationId: {CorrelationId}]", 
                            payment.Id, correlationId);
                        break;
                        
                    default:
                        result.IsSuccess = false;
                        result.Status = RefundStatus.Failed;
                        result.FailureReason = $"Square refund failed with status: {refund.Status}";
                        _logger.LogError("Square refund failed for payment {PaymentId} with status {Status} [CorrelationId: {CorrelationId}]", 
                            payment.Id, refund.Status, correlationId);
                        break;
                }

                return result;
            }
            else
            {
                var errorMessage = string.Join(", ", response.Errors?.Select(e => e.Detail) ?? new[] { "Unknown error" });
                
                _logger.LogError("Square refund failed for payment {PaymentId}: {Error} [CorrelationId: {CorrelationId}]", 
                    payment.Id, errorMessage, correlationId);
                    
                return new RefundProviderResult
                {
                    IsSuccess = false,
                    Status = RefundStatus.Failed,
                    FailureReason = errorMessage
                };
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unexpected error processing Square refund for payment {PaymentId} [CorrelationId: {CorrelationId}]", 
                payment.Id, correlationId);
                
            return new RefundProviderResult
            {
                IsSuccess = false,
                Status = RefundStatus.Failed,
                FailureReason = "An unexpected error occurred"
            };
        }
    }

    public async Task<PaymentMethodResult> SavePaymentMethodAsync(SavePaymentMethodDto request, string correlationId)
    {
        try
        {
            _logger.LogInformation("Saving Square payment method for customer {CustomerId} [CorrelationId: {CorrelationId}]", 
                request.CustomerId, correlationId);

            if (request.PaymentMethodDetails.Card == null)
            {
                return new PaymentMethodResult
                {
                    IsSuccess = false,
                    FailureReason = "Card details are required for Square payment methods"
                };
            }

            var cardsApi = _squareClient.CardsApi;
            
            var cardRequest = new CreateCardRequest(
                idempotencyKey: Guid.NewGuid().ToString(),
                sourceId: "REPLACE_WITH_NONCE", // In production, this would be a nonce from Square.js
                card: new Card
                {
                    CardholderName = request.PaymentMethodDetails.Card.HolderName
                }
            );

            // Note: In a real implementation, you would need to use Square.js to tokenize the card
            // and get a nonce instead of handling raw card details
            _logger.LogWarning("Square payment method saving requires Square.js integration for security. " +
                "Raw card details should not be processed directly. Customer {CustomerId} [CorrelationId: {CorrelationId}]", 
                request.CustomerId, correlationId);

            return new PaymentMethodResult
            {
                IsSuccess = false,
                FailureReason = "Square payment method saving requires frontend integration with Square.js for security"
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unexpected error saving Square payment method for customer {CustomerId} [CorrelationId: {CorrelationId}]", 
                request.CustomerId, correlationId);
                
            return new PaymentMethodResult
            {
                IsSuccess = false,
                FailureReason = "An unexpected error occurred"
            };
        }
    }

    public async Task<bool> DeletePaymentMethodAsync(string providerTokenId, string correlationId)
    {
        try
        {
            _logger.LogInformation("Deleting Square payment method {TokenId} [CorrelationId: {CorrelationId}]", 
                providerTokenId, correlationId);

            var cardsApi = _squareClient.CardsApi;
            var response = await cardsApi.DisableCardAsync(providerTokenId);

            if (response.IsSuccess)
            {
                _logger.LogInformation("Square payment method deleted {TokenId} [CorrelationId: {CorrelationId}]", 
                    providerTokenId, correlationId);
                return true;
            }
            else
            {
                var errorMessage = string.Join(", ", response.Errors?.Select(e => e.Detail) ?? new[] { "Unknown error" });
                _logger.LogError("Square error deleting payment method {TokenId}: {Error} [CorrelationId: {CorrelationId}]", 
                    providerTokenId, errorMessage, correlationId);
                return false;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unexpected error deleting Square payment method {TokenId} [CorrelationId: {CorrelationId}]", 
                providerTokenId, correlationId);
            return false;
        }
    }

    private string GetSourceId(ProcessPaymentDto request)
    {
        // In a real implementation, this would be a nonce from Square.js or a saved card token
        if (request.PaymentMethodDetails?.TokenId != null)
        {
            return request.PaymentMethodDetails.TokenId;
        }
        
        // For testing purposes, return a placeholder
        // In production, raw card details should never reach the server
        return "REPLACE_WITH_NONCE_FROM_SQUARE_JS";
    }
}
